--- old.jsExportMemberMergedWithModuleAugmentation.errors.txt
+++ new.jsExportMemberMergedWithModuleAugmentation.errors.txt
@@= skipped -0, +0 lines =@@
-/index.ts(11,7): error TS2741: Property 'x' is missing in type '{ b: string; }' but required in type 'Abcde'.
+/index.ts(1,23): error TS2497: This module can only be referenced with ECMAScript imports/exports by turning on the 'esModuleInterop' flag and referencing its default export.
+/index.ts(3,16): error TS2671: Cannot augment module './test' because it resolves to a non-module entity.
+/index.ts(11,10): error TS2749: 'Abcde' refers to a value, but is being used as a type here. Did you mean 'typeof Abcde'?
 
 
 ==== /test.js (0 errors) ====
@@= skipped -10, +12 lines =@@
       Abcde
     };
     
-==== /index.ts (1 errors) ====
+==== /index.ts (3 errors) ====
     import { Abcde } from "./test";
+                          ~~~~~~~~
+!!! error TS2497: This module can only be referenced with ECMAScript imports/exports by turning on the 'esModuleInterop' flag and referencing its default export.
     
     declare module "./test" {
+                   ~~~~~~~~
+!!! error TS2671: Cannot augment module './test' because it resolves to a non-module entity.
       interface Abcde { b: string }
     }
     
@@= skipped -12, +16 lines =@@
     // Bug: the type meaning from /test.js does not
     // propagate through the object literal export.
     const x: Abcde = { b: "" };
-          ~
-!!! error TS2741: Property 'x' is missing in type '{ b: string; }' but required in type 'Abcde'.
-!!! related TS2728 /test.js:3:3: 'x' is declared here.
+             ~~~~~
+!!! error TS2749: 'Abcde' refers to a value, but is being used as a type here. Did you mean 'typeof Abcde'?
     
