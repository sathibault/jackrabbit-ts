--- old.paramTagTypeResolution.types
+++ new.paramTagTypeResolution.types
@@= skipped -1, +1 lines =@@
 
 === main.js ===
 var f = require('./first');
->f : <T>(x: T, k: (t: T) => void) => void
->require('./first') : <T>(x: T, k: (t: T) => void) => void
+>f : (x: any, k: any) => any
+>require('./first') : (x: any, k: any) => any
 >require : any
 >'./first' : "./first"
 
 f(1, n => { })
->f(1, n => { }) : void
->f : <T>(x: T, k: (t: T) => void) => void
+>f(1, n => { }) : any
+>f : (x: any, k: any) => any
 >1 : 1
->n => { } : (n: number) => void
->n : number
+>n => { } : (n: any) => void
+>n : any
 
 === first.js ===
 /** @template T
@@= skipped -18, +18 lines =@@
  * @param {(t: T) => void} k
  */
 module.exports = function (x, k) { return k(x) }
->module.exports = function (x, k) { return k(x) } : <T>(x: T, k: (t: T) => void) => void
->module.exports : <T>(x: T, k: (t: T) => void) => void
->module : { exports: <T>(x: T, k: (t: T) => void) => void; }
->exports : <T>(x: T, k: (t: T) => void) => void
->function (x, k) { return k(x) } : <T>(x: T, k: (t: T) => void) => void
->x : T
->k : (t: T) => void
->k(x) : void
->k : (t: T) => void
->x : T
+>module.exports = function (x, k) { return k(x) } : (x: any, k: any) => any
+>module.exports : (x: any, k: any) => any
+>module : { export=: (x: any, k: any) => any; }
+>exports : (x: any, k: any) => any
+>function (x, k) { return k(x) } : (x: any, k: any) => any
+>x : any
+>k : any
+>k(x) : any
+>k : any
+>x : any
 
