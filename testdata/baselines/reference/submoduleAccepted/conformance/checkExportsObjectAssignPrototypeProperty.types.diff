--- old.checkExportsObjectAssignPrototypeProperty.types
+++ new.checkExportsObjectAssignPrototypeProperty.types
@@= skipped -3, +3 lines =@@
 import "./";
 
 import Person = require("./mod1");
->Person : typeof Person
+>Person : (name: string) => void
 
 const m1 = new Person("Name")
->m1 : Person
->new Person("Name") : Person
->Person : typeof Person
+>m1 : any
+>new Person("Name") : any
+>Person : (name: string) => void
 >"Name" : "Name"
 
 m1.thing;
->m1.thing : number
->m1 : Person
->thing : number
+>m1.thing : any
+>m1 : any
+>thing : any
 
 m1.readonlyProp;
->m1.readonlyProp : string
->m1 : Person
->readonlyProp : string
+>m1.readonlyProp : any
+>m1 : any
+>readonlyProp : any
 
 m1.rwAccessors;
->m1.rwAccessors : number
->m1 : Person
->rwAccessors : number
+>m1.rwAccessors : any
+>m1 : any
+>rwAccessors : any
 
 m1.readonlyAccessor;
->m1.readonlyAccessor : number
->m1 : Person
->readonlyAccessor : number
+>m1.readonlyAccessor : any
+>m1 : any
+>readonlyAccessor : any
 
 m1.setonlyAccessor;
->m1.setonlyAccessor : string
->m1 : Person
->setonlyAccessor : string
+>m1.setonlyAccessor : any
+>m1 : any
+>setonlyAccessor : any
 
 // allowed assignments
 m1.thing = 10;
 >m1.thing = 10 : 10
->m1.thing : number
->m1 : Person
->thing : number
+>m1.thing : any
+>m1 : any
+>thing : any
 >10 : 10
 
 m1.rwAccessors = 11;
 >m1.rwAccessors = 11 : 11
->m1.rwAccessors : number
->m1 : Person
->rwAccessors : number
+>m1.rwAccessors : any
+>m1 : any
+>rwAccessors : any
 >11 : 11
 
 m1.setonlyAccessor = "yes";
 >m1.setonlyAccessor = "yes" : "yes"
->m1.setonlyAccessor : string
->m1 : Person
->setonlyAccessor : string
+>m1.setonlyAccessor : any
+>m1 : any
+>setonlyAccessor : any
 >"yes" : "yes"
 
 // disallowed assignments
 m1.readonlyProp = "name";
 >m1.readonlyProp = "name" : "name"
 >m1.readonlyProp : any
->m1 : Person
+>m1 : any
 >readonlyProp : any
 >"name" : "name"
 
 m1.readonlyAccessor = 12;
 >m1.readonlyAccessor = 12 : 12
 >m1.readonlyAccessor : any
->m1 : Person
+>m1 : any
 >readonlyAccessor : any
 >12 : 12
 
 m1.thing = "no";
 >m1.thing = "no" : "no"
->m1.thing : number
->m1 : Person
->thing : number
+>m1.thing : any
+>m1 : any
+>thing : any
 >"no" : "no"
 
 m1.rwAccessors = "no";
 >m1.rwAccessors = "no" : "no"
->m1.rwAccessors : number
->m1 : Person
->rwAccessors : number
+>m1.rwAccessors : any
+>m1 : any
+>rwAccessors : any
 >"no" : "no"
 
 m1.setonlyAccessor = 0;
 >m1.setonlyAccessor = 0 : 0
->m1.setonlyAccessor : string
->m1 : Person
->setonlyAccessor : string
+>m1.setonlyAccessor : any
+>m1 : any
+>setonlyAccessor : any
 >0 : 0
 
 
@@= skipped -98, +98 lines =@@
  * @param {string} name
  */
 function Person(name) {
->Person : typeof Person
+>Person : (name: string) => void
 >name : string
 
     this.name = name;
 >this.name = name : string
 >this.name : any
->this : this
+>this : any
 >name : any
 >name : string
 }
@@= skipped -14, +14 lines =@@
 >Person.prototype.describe = function () {    return "Person called " + this.name;} : () => string
 >Person.prototype.describe : any
 >Person.prototype : any
->Person : typeof Person
+>Person : (name: string) => void
 >prototype : any
 >describe : any
 >function () {    return "Person called " + this.name;} : () => string
@@= skipped -8, +8 lines =@@
     return "Person called " + this.name;
 >"Person called " + this.name : string
 >"Person called " : "Person called "
->this.name : string
->this : this
->name : string
+>this.name : any
+>this : any
+>name : any
 
 };
 Object.defineProperty(Person.prototype, "thing", { value: 42, writable: true });
@@= skipped -11, +11 lines =@@
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Person.prototype : any
->Person : typeof Person
+>Person : (name: string) => void
 >prototype : any
 >"thing" : "thing"
 >{ value: 42, writable: true } : { value: number; writable: true; }
@@= skipped -15, +15 lines =@@
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Person.prototype : any
->Person : typeof Person
+>Person : (name: string) => void
 >prototype : any
 >"readonlyProp" : "readonlyProp"
 >{ value: "Smith", writable: false } : { value: string; writable: false; }
@@= skipped -15, +15 lines =@@
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Person.prototype : any
->Person : typeof Person
+>Person : (name: string) => void
 >prototype : any
 >"rwAccessors" : "rwAccessors"
->{ get() { return 98122 }, set(_) { /*ignore*/ } } : { get(): number; set(_: any): void; }
+>{ get() { return 98122 }, set(_) { /*ignore*/ } } : { get: () => number; set: (_: any) => void; }
 >get : () => number
 >98122 : 98122
 >set : (_: any) => void
@@= skipped -15, +15 lines =@@
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Person.prototype : any
->Person : typeof Person
+>Person : (name: string) => void
 >prototype : any
 >"readonlyAccessor" : "readonlyAccessor"
->{ get() { return 21.75 } } : { get(): number; }
+>{ get() { return 21.75 } } : { get: () => number; }
 >get : () => number
 >21.75 : 21.75
 
@@= skipped -13, +13 lines =@@
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Person.prototype : any
->Person : typeof Person
+>Person : (name: string) => void
 >prototype : any
 >"setonlyAccessor" : "setonlyAccessor"
->{    /** @param {string} str */    set(str) {        this.rwAccessors = Number(str)    }} : { set(str: string): void; }
+>{    /** @param {string} str */    set(str) {        this.rwAccessors = Number(str)    }} : { set: (str: string) => void; }
 
     /** @param {string} str */
     set(str) {
@@= skipped -12, +12 lines =@@
 
         this.rwAccessors = Number(str)
 >this.rwAccessors = Number(str) : number
->this.rwAccessors : number
->this : this
->rwAccessors : number
+>this.rwAccessors : any
+>this : any
+>rwAccessors : any
 >Number(str) : number
 >Number : NumberConstructor
 >str : string
     }
 });
 module.exports = Person;
->module.exports = Person : typeof Person
->module.exports : typeof Person
->module : { exports: typeof Person; }
->exports : typeof Person
->Person : typeof Person
+>module.exports = Person : (name: string) => void
+>module.exports : (name: string) => void
+>module : { Person: (name: string) => void; }
+>exports : (name: string) => void
+>Person : (name: string) => void
 
