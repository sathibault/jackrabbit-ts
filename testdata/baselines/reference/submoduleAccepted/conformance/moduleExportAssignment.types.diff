--- old.moduleExportAssignment.types
+++ new.moduleExportAssignment.types
@@= skipped -1, +1 lines =@@
 
 === use.js ===
 var npmlog = require('./npmlog')
->npmlog : { on(s: string): void; x: number; y: 2; }
->require('./npmlog') : { on(s: string): void; x: number; y: 2; }
+>npmlog : typeof import("npmlog")
+>require('./npmlog') : typeof import("npmlog")
 >require : any
 >'./npmlog' : "./npmlog"
 
 npmlog.x
->npmlog.x : number
->npmlog : { on(s: string): void; x: number; y: 2; }
->x : number
+>npmlog.x : any
+>npmlog : typeof import("npmlog")
+>x : any
 
 npmlog.on
->npmlog.on : (s: string) => void
->npmlog : { on(s: string): void; x: number; y: 2; }
->on : (s: string) => void
+>npmlog.on : any
+>npmlog : typeof import("npmlog")
+>on : any
 
 === npmlog.js ===
 class EE {
@@= skipped -25, +25 lines =@@
 >s : string
 }
 var npmlog = module.exports = new EE()
->npmlog : { on(s: string): void; x: number; y: 2; }
->module.exports = new EE() : { on(s: string): void; x: number; y: 2; }
->module.exports : { on(s: string): void; x: number; y: 2; }
->module : { exports: { on(s: string): void; x: number; y: 2; }; }
->exports : { on(s: string): void; x: number; y: 2; }
+>npmlog : EE
+>module.exports = new EE() : EE
+>module.exports : typeof import("npmlog")
+>module : { "npmlog": typeof import("npmlog"); }
+>exports : typeof import("npmlog")
 >new EE() : EE
 >EE : typeof EE
 
 npmlog.on('hi') // both references should see EE.on
 >npmlog.on('hi') : void
 >npmlog.on : (s: string) => void
->npmlog : { on(s: string): void; x: number; y: 2; }
+>npmlog : EE
 >on : (s: string) => void
 >'hi' : "hi"
 
 module.exports.on('hi') // here too
->module.exports.on('hi') : void
->module.exports.on : (s: string) => void
->module.exports : { on(s: string): void; x: number; y: 2; }
->module : { exports: { on(s: string): void; x: number; y: 2; }; }
->exports : { on(s: string): void; x: number; y: 2; }
->on : (s: string) => void
+>module.exports.on('hi') : any
+>module.exports.on : any
+>module.exports : typeof import("npmlog")
+>module : { "npmlog": typeof import("npmlog"); }
+>exports : typeof import("npmlog")
+>on : any
 >'hi' : "hi"
 
 npmlog.x = 1
 >npmlog.x = 1 : 1
->npmlog.x : number
->npmlog : { on(s: string): void; x: number; y: 2; }
->x : number
+>npmlog.x : any
+>npmlog : EE
+>x : any
 >1 : 1
 
 module.exports.y = 2
 >module.exports.y = 2 : 2
 >module.exports.y : 2
->module.exports : { on(s: string): void; x: number; y: 2; }
->module : { exports: { on(s: string): void; x: number; y: 2; }; }
->exports : { on(s: string): void; x: number; y: 2; }
+>module.exports : typeof import("npmlog")
+>module : { "npmlog": typeof import("npmlog"); }
+>exports : typeof import("npmlog")
 >y : 2
 >2 : 2
 
 npmlog.y
->npmlog.y : 2
->npmlog : { on(s: string): void; x: number; y: 2; }
->y : 2
+>npmlog.y : any
+>npmlog : EE
+>y : any
 
 module.exports.x
->module.exports.x : number
->module.exports : { on(s: string): void; x: number; y: 2; }
->module : { exports: { on(s: string): void; x: number; y: 2; }; }
->exports : { on(s: string): void; x: number; y: 2; }
->x : number
+>module.exports.x : any
+>module.exports : typeof import("npmlog")
+>module : { "npmlog": typeof import("npmlog"); }
+>exports : typeof import("npmlog")
+>x : any
 
