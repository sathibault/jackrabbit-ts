--- old.moduleExportAssignment7.types
+++ new.moduleExportAssignment7.types
@@= skipped -20, +20 lines =@@
 
 /** @typedef {() => number} buz */
 module.exports = {
->module.exports = {    Thing,    AnotherThing,    foo,    qux: bar,    baz() { return 5 },    literal: "",} : { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz(): number; literal: string; }
->module.exports : { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz(): number; literal: string; }
->module : { exports: { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz(): number; literal: string; }; }
->exports : { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz(): number; literal: string; }
->{    Thing,    AnotherThing,    foo,    qux: bar,    baz() { return 5 },    literal: "",} : { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz(): number; literal: string; }
+>module.exports = {    Thing,    AnotherThing,    foo,    qux: bar,    baz() { return 5 },    literal: "",} : { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz: () => number; literal: string; }
+>module.exports : { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz: () => number; literal: string; }
+>module : { export=: { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz: () => number; literal: string; }; }
+>exports : { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz: () => number; literal: string; }
+>{    Thing,    AnotherThing,    foo,    qux: bar,    baz() { return 5 },    literal: "",} : { Thing: typeof Thing; AnotherThing: typeof AnotherThing; foo: () => number; qux: () => number; baz: () => number; literal: string; }
 
     Thing,
 >Thing : typeof Thing
@@= skipped -38, +38 lines =@@
  * @param {import("./mod").literal} g
  */
 function jstypes(a, b, c, d, e, f, g) {
->jstypes : (a: Thing, b: AnotherThing, c: () => number, d: () => number, e: () => number, f: import("./mod").buz, g: string) => number
->a : Thing
->b : AnotherThing
->c : () => number
->d : () => number
->e : () => number
->f : import("mod").buz
->g : string
+>jstypes : (a: any, b: any, c: any, d: any, e: any, f: any, g: any) => any
+>a : any
+>b : any
+>c : any
+>d : any
+>e : any
+>f : any
+>g : any
 
     return a.x + b.y + c() + d() + e() + f() + g.length
->a.x + b.y + c() + d() + e() + f() + g.length : number
->a.x + b.y + c() + d() + e() + f() : number
->a.x + b.y + c() + d() + e() : number
->a.x + b.y + c() + d() : number
->a.x + b.y + c() : number
->a.x + b.y : number
->a.x : number
->a : Thing
->x : number
->b.y : number
->b : AnotherThing
->y : number
->c() : number
->c : () => number
->d() : number
->d : () => number
->e() : number
->e : () => number
->f() : number
->f : import("mod").buz
->g.length : number
->g : string
->length : number
+>a.x + b.y + c() + d() + e() + f() + g.length : any
+>a.x + b.y + c() + d() + e() + f() : any
+>a.x + b.y + c() + d() + e() : any
+>a.x + b.y + c() + d() : any
+>a.x + b.y + c() : any
+>a.x + b.y : any
+>a.x : any
+>a : any
+>x : any
+>b.y : any
+>b : any
+>y : any
+>c() : any
+>c : any
+>d() : any
+>d : any
+>e() : any
+>e : any
+>f() : any
+>f : any
+>g.length : any
+>g : any
+>length : any
 }
 
 /**
@@= skipped -45, +45 lines =@@
  * @param {typeof import("./mod").literal} g
  */
 function jsvalues(a, b, c, d, e, f, g) {
->jsvalues : (a: typeof import("./mod").Thing, b: typeof import("./mod").AnotherThing, c: typeof import("./mod").foo, d: typeof import("./mod").qux, e: typeof import("./mod").baz, f: typeof import("./mod").buz, g: typeof import("./mod").literal) => any
+>jsvalues : (a: typeof Thing, b: typeof AnotherThing, c: () => number, d: () => number, e: () => number, f: any, g: string) => any
 >a : typeof Thing
 >b : typeof AnotherThing
 >c : () => number
@@= skipped -37, +37 lines =@@
 
 === index.ts ===
 function types(
->types : (a: import("./mod").Thing, b: import("./mod").AnotherThing, c: import("./mod").foo, d: import("./mod").qux, e: import("./mod").baz, f: import("./mod").buz, g: import("./mod").literal) => any
+>types : (a: any, b: any, c: any, d: any, e: any, f: any, g: any) => any
 
     a: import('./mod').Thing,
 >a : any
@@= skipped -18, +18 lines =@@
 >e : any
 
     f: import('./mod').buz,
->f : import("mod").buz
+>f : any
 
     g: import('./mod').literal,
 >g : any
@@= skipped -25, +25 lines =@@
 >d : any
 >e() : any
 >e : any
->f() : number
->f : import("mod").buz
+>f() : any
+>f : any
 >g.length : any
 >g : any
 >length : any
 }
 
 function values(
->values : (a: typeof import("./mod").Thing, b: typeof import("./mod").AnotherThing, c: typeof import("./mod").foo, d: typeof import("./mod").qux, e: typeof import("./mod").baz, f: typeof import("./mod").buz, g: typeof import("./mod").literal) => any
+>values : (a: typeof Thing, b: typeof AnotherThing, c: () => number, d: () => number, e: () => number, f: any, g: string) => any
 
     a: typeof import('./mod').Thing,
 >a : typeof Thing
