--- old.chainedPrototypeAssignment.types
+++ new.chainedPrototypeAssignment.types
@@= skipped -2, +2 lines =@@
 === use.js ===
 /// <reference path='./types.d.ts'/>
 var mod = require('./mod');
->mod : typeof mod
->require('./mod') : typeof mod
+>mod : typeof import("mod")
+>require('./mod') : typeof import("mod")
 >require : (name: string) => any
 >'./mod' : "./mod"
 
 var a = new mod.A()
->a : A
->new mod.A() : A
->mod.A : typeof A
->mod : typeof mod
->A : typeof A
+>a : any
+>new mod.A() : any
+>mod.A : () => void
+>mod : typeof import("mod")
+>A : () => void
 
 var b = new mod.B()
->b : B
->new mod.B() : B
->mod.B : typeof B
->mod : typeof mod
->B : typeof B
+>b : any
+>new mod.B() : any
+>mod.B : () => void
+>mod : typeof import("mod")
+>B : () => void
 
 a.m('nope')
->a.m('nope') : number
->a.m : (n: number) => number
->a : A
->m : (n: number) => number
+>a.m('nope') : any
+>a.m : any
+>a : any
+>m : any
 >'nope' : "nope"
 
 b.m('not really')
->b.m('not really') : number
->b.m : (n: number) => number
->b : B
->m : (n: number) => number
+>b.m('not really') : any
+>b.m : any
+>b : any
+>m : any
 >'not really' : "not really"
 
 === types.d.ts ===
@@= skipped -44, +44 lines =@@
 === mod.js ===
 /// <reference path='./types.d.ts'/>
 var A = function A() {
->A : typeof A
->function A() {    this.a = 1} : typeof A
->A : typeof A
+>A : () => void
+>function A() {    this.a = 1} : () => void
+>A : () => void
 
     this.a = 1
 >this.a = 1 : 1
 >this.a : any
->this : this
+>this : any
 >a : any
 >1 : 1
 }
 var B = function B() {
->B : typeof B
->function B() {    this.b = 2} : typeof B
->B : typeof B
+>B : () => void
+>function B() {    this.b = 2} : () => void
+>B : () => void
 
     this.b = 2
 >this.b = 2 : 2
 >this.b : any
->this : this
+>this : any
 >b : any
 >2 : 2
 }
 exports.A = A
->exports.A = A : typeof A
->exports.A : typeof A
+>exports.A = A : () => void
+>exports.A : () => void
 >exports : typeof import("mod")
->A : typeof A
->A : typeof A
+>A : () => void
+>A : () => void
 
 exports.B = B
->exports.B = B : typeof B
->exports.B : typeof B
+>exports.B = B : () => void
+>exports.B : () => void
 >exports : typeof import("mod")
->B : typeof B
->B : typeof B
+>B : () => void
+>B : () => void
 
 A.prototype = B.prototype = {
->A.prototype = B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }
->A.prototype : { m(n: number): number; }
->A : typeof A
->prototype : { m(n: number): number; }
->B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }
->B.prototype : { m(n: number): number; }
->B : typeof B
->prototype : { m(n: number): number; }
->{    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }
+>A.prototype = B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m: (n: number) => number; }
+>A.prototype : any
+>A : () => void
+>prototype : any
+>B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m: (n: number) => number; }
+>B.prototype : any
+>B : () => void
+>prototype : any
+>{    /** @param {number} n */    m(n) {        return n + 1    }} : { m: (n: number) => number; }
 
     /** @param {number} n */
     m(n) {
