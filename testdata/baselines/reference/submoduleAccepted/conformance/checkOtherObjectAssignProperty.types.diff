--- old.checkOtherObjectAssignProperty.types
+++ new.checkOtherObjectAssignProperty.types
@@= skipped -1, +1 lines =@@
 
 === importer.js ===
 const mod = require("./mod1");
->mod : typeof mod
->require("./mod1") : typeof mod
+>mod : any
+>require("./mod1") : any
 >require : any
 >"./mod1" : "./mod1"
 
 mod.thing;
->mod.thing : number
->mod : typeof mod
->thing : number
+>mod.thing : any
+>mod : any
+>thing : any
 
 mod.other;
 >mod.other : any
->mod : typeof mod
+>mod : any
 >other : any
 
 mod.prop;
 >mod.prop : any
->mod : typeof mod
+>mod : any
 >prop : any
 
 mod.bad1;
 >mod.bad1 : any
->mod : typeof mod
+>mod : any
 >bad1 : any
 
 mod.bad2;
->mod.bad2 : string
->mod : typeof mod
->bad2 : string
+>mod.bad2 : any
+>mod : any
+>bad2 : any
 
 mod.bad3;
 >mod.bad3 : any
->mod : typeof mod
+>mod : any
 >bad3 : any
 
 
 mod.thing = 0;
 >mod.thing = 0 : 0
->mod.thing : number
->mod : typeof mod
->thing : number
+>mod.thing : any
+>mod : any
+>thing : any
 >0 : 0
 
 mod.other = 0;
 >mod.other = 0 : 0
 >mod.other : any
->mod : typeof mod
+>mod : any
 >other : any
 >0 : 0
 
 mod.prop = 0;
 >mod.prop = 0 : 0
 >mod.prop : any
->mod : typeof mod
+>mod : any
 >prop : any
 >0 : 0
 
 mod.bad1 = 0;
 >mod.bad1 = 0 : 0
 >mod.bad1 : any
->mod : typeof mod
+>mod : any
 >bad1 : any
 >0 : 0
 
 mod.bad2 = 0;
 >mod.bad2 = 0 : 0
 >mod.bad2 : any
->mod : typeof mod
+>mod : any
 >bad2 : any
 >0 : 0
 
 mod.bad3 = 0;
 >mod.bad3 = 0 : 0
 >mod.bad3 : any
->mod : typeof mod
+>mod : any
 >bad3 : any
 >0 : 0
 
@@= skipped -88, +88 lines =@@
 >true : true
 
 Object.defineProperty(exports, "thing", obj);
->Object.defineProperty(exports, "thing", obj) : typeof import("mod1")
+>Object.defineProperty(exports, "thing", obj) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->exports : typeof import("mod1")
+>exports : any
 >"thing" : "thing"
 >obj : { value: number; writable: boolean; }
 
@@= skipped -14, +14 lines =@@
 let str = /** @type {string} */("other");
 >str : string
 >("other") : string
+>"other" : string
 >"other" : "other"
 
 Object.defineProperty(exports, str, { value: 42, writable: true });
->Object.defineProperty(exports, str, { value: 42, writable: true }) : typeof import("mod1")
+>Object.defineProperty(exports, str, { value: 42, writable: true }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->exports : typeof import("mod1")
+>exports : any
 >str : string
 >{ value: 42, writable: true } : { value: number; writable: true; }
 >value : number
@@= skipped -20, +21 lines =@@
 >"prop" : "prop"
 
 Object.defineProperty(exports, propName, { value: 42, writable: true });
->Object.defineProperty(exports, propName, { value: 42, writable: true }) : typeof import("mod1")
+>Object.defineProperty(exports, propName, { value: 42, writable: true }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->exports : typeof import("mod1")
+>exports : any
 >propName : "prop"
 >{ value: 42, writable: true } : { value: number; writable: true; }
 >value : number
@@= skipped -14, +14 lines =@@
 
 
 Object.defineProperty(exports, "bad1", { });
->Object.defineProperty(exports, "bad1", { }) : typeof import("mod1")
+>Object.defineProperty(exports, "bad1", { }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->exports : typeof import("mod1")
+>exports : any
 >"bad1" : "bad1"
 >{ } : {}
 
 Object.defineProperty(exports, "bad2", { get() { return 12 }, value: "no" });
->Object.defineProperty(exports, "bad2", { get() { return 12 }, value: "no" }) : typeof import("mod1")
+>Object.defineProperty(exports, "bad2", { get() { return 12 }, value: "no" }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->exports : typeof import("mod1")
+>exports : any
 >"bad2" : "bad2"
->{ get() { return 12 }, value: "no" } : { get(): number; value: string; }
+>{ get() { return 12 }, value: "no" } : { get: () => number; value: string; }
 >get : () => number
 >12 : 12
 >value : string
 >"no" : "no"
 
 Object.defineProperty(exports, "bad3", { writable: true });
->Object.defineProperty(exports, "bad3", { writable: true }) : typeof import("mod1")
+>Object.defineProperty(exports, "bad3", { writable: true }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->exports : typeof import("mod1")
+>exports : any
 >"bad3" : "bad3"
 >{ writable: true } : { writable: true; }
 >writable : true
