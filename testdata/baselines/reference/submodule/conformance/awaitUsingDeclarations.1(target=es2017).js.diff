--- old.awaitUsingDeclarations.1(target=es2017).js
+++ new.awaitUsingDeclarations.1(target=es2017).js
@@= skipped -151, +151 lines =@@
     var e = new Error(message);
     return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
 });
-var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
-var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
-    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
-    var g = generator.apply(thisArg, _arguments || []), i, q = [];
-    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
-    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
-    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
-    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
-    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
-    function fulfill(value) { resume("next", value); }
-    function reject(value) { resume("throw", value); }
-    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
-};
+var d1, a, C1, env_1;
 async function af() {
     const env_15 = { stack: [], error: void 0, hasError: false };
     try {
@@= skipped -29, +17 lines =@@
             await result_15;
     }
 }
-function ag() {
-    return __asyncGenerator(this, arguments, function* ag_1() {
-        const env_16 = { stack: [], error: void 0, hasError: false };
-        try {
-            const d5 = __addDisposableResource(env_16, { async [Symbol.asyncDispose]() { } }, true);
-            yield yield __await(void 0);
-            yield __await(null);
-        }
-        catch (e_16) {
-            env_16.error = e_16;
-            env_16.hasError = true;
-        }
-        finally {
-            const result_16 = __disposeResources(env_16);
-            if (result_16)
-                yield __await(result_16);
-        }
-    });
+async function* ag() {
+    const env_16 = { stack: [], error: void 0, hasError: false };
+    try {
+        const d5 = __addDisposableResource(env_16, { async [Symbol.asyncDispose]() { } }, true);
+        yield;
+        await null;
+    }
+    catch (e_16) {
+        env_16.error = e_16;
+        env_16.hasError = true;
+    }
+    finally {
+        const result_16 = __disposeResources(env_16);
+        if (result_16)
+            await result_16;
+    }
 }
-var d1, a, C1, env_1;
 const env_2 = { stack: [], error: void 0, hasError: false };
 try {
     d1 = __addDisposableResource(env_2, { async [Symbol.asyncDispose]() { } }, true);
@@= skipped -39, +36 lines =@@
         }
     };
     C1 = class C1 {
-        constructor() {
-            this.a = async () => {
-                const env_18 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d7 = __addDisposableResource(env_18, { async [Symbol.asyncDispose]() { } }, true);
-                }
-                catch (e_18) {
-                    env_18.error = e_18;
-                    env_18.hasError = true;
-                }
-                finally {
-                    const result_18 = __disposeResources(env_18);
-                    if (result_18)
-                        await result_18;
-                }
-            };
-        }
+        a = async () => {
+            const env_18 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d7 = __addDisposableResource(env_18, { async [Symbol.asyncDispose]() { } }, true);
+            }
+            catch (e_18) {
+                env_18.error = e_18;
+                env_18.hasError = true;
+            }
+            finally {
+                const result_18 = __disposeResources(env_18);
+                if (result_18)
+                    await result_18;
+            }
+        };
         async am() {
             const env_19 = { stack: [], error: void 0, hasError: false };
             try {
@@= skipped -33, +31 lines =@@
                     await result_19;
             }
         }
-        ag() {
-            return __asyncGenerator(this, arguments, function* ag_2() {
-                const env_20 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d15 = __addDisposableResource(env_20, { async [Symbol.asyncDispose]() { } }, true);
-                    yield yield __await(void 0);
-                    yield __await(null);
-                }
-                catch (e_20) {
-                    env_20.error = e_20;
-                    env_20.hasError = true;
-                }
-                finally {
-                    const result_20 = __disposeResources(env_20);
-                    if (result_20)
-                        yield __await(result_20);
-                }
-            });
+        async *ag() {
+            const env_20 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d15 = __addDisposableResource(env_20, { async [Symbol.asyncDispose]() { } }, true);
+                yield;
+                await null;
+            }
+            catch (e_20) {
+                env_20.error = e_20;
+                env_20.hasError = true;
+            }
+            finally {
+                const result_20 = __disposeResources(env_20);
+                if (result_20)
+                    await result_20;
+            }
         }
     };
     {
@@= skipped -89, +87 lines =@@
                 await result_4;
         }
     }
-    catch (_a) {
+    catch {
         const env_6 = { stack: [], error: void 0, hasError: false };
         try {
             const d24 = __addDisposableResource(env_6, { async [Symbol.asyncDispose]() { } }, true);
