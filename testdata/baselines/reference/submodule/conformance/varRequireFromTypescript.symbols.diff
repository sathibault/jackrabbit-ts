--- old.varRequireFromTypescript.symbols
+++ new.varRequireFromTypescript.symbols
@@= skipped -3, +3 lines =@@
 var ex = require('./ex')
 >ex : Symbol(ex, Decl(use.js, 0, 3))
 >require : Symbol(require)
->'./ex' : Symbol(ex, Decl(ex.d.ts, 0, 0))
+>'./ex' : Symbol("ex", Decl(ex.d.ts, 0, 0))
 
 // values work
 var crunch = new ex.Crunch(1);
 >crunch : Symbol(crunch, Decl(use.js, 3, 3))
->ex.Crunch : Symbol(ex.Crunch, Decl(ex.d.ts, 0, 33))
+>ex.Crunch : Symbol(Crunch, Decl(ex.d.ts, 0, 33))
 >ex : Symbol(ex, Decl(use.js, 0, 3))
->Crunch : Symbol(ex.Crunch, Decl(ex.d.ts, 0, 33))
+>Crunch : Symbol(Crunch, Decl(ex.d.ts, 0, 33))
 
 crunch.n
->crunch.n : Symbol(ex.Crunch.n, Decl(ex.d.ts, 1, 21))
+>crunch.n : Symbol(n, Decl(ex.d.ts, 1, 21))
 >crunch : Symbol(crunch, Decl(use.js, 3, 3))
->n : Symbol(ex.Crunch.n, Decl(ex.d.ts, 1, 21))
+>n : Symbol(n, Decl(ex.d.ts, 1, 21))
 
 
 // types work
@@= skipped -31, +31 lines =@@
 >day : Symbol(day, Decl(ex.d.ts, 0, 24))
 
     wrap.n
->wrap.n : Symbol(ex.Crunch.n, Decl(ex.d.ts, 1, 21))
+>wrap.n : Symbol(n, Decl(ex.d.ts, 1, 21))
 >wrap : Symbol(wrap, Decl(use.js, 12, 20))
->n : Symbol(ex.Crunch.n, Decl(ex.d.ts, 1, 21))
+>n : Symbol(n, Decl(ex.d.ts, 1, 21))
 }
 
 === ex.d.ts ===
@@= skipped -14, +14 lines =@@
 >Crunch : Symbol(Crunch, Decl(ex.d.ts, 0, 33))
 
     n: number
->n : Symbol(Crunch.n, Decl(ex.d.ts, 1, 21))
+>n : Symbol(n, Decl(ex.d.ts, 1, 21))
 
     m(): number
->m : Symbol(Crunch.m, Decl(ex.d.ts, 2, 13))
+>m : Symbol(m, Decl(ex.d.ts, 2, 13))
 
     constructor(n: number)
 >n : Symbol(n, Decl(ex.d.ts, 4, 16))
