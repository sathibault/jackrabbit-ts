--- old.typeFromParamTagForFunction.symbols
+++ new.typeFromParamTagForFunction.symbols
@@= skipped -11, +11 lines =@@
 === a-ext.js ===
 exports.A = function () {
 >exports.A : Symbol(A, Decl(a-ext.js, 0, 0))
->exports : Symbol(A, Decl(a-ext.js, 0, 0))
+>exports : Symbol("a-ext", Decl(a-ext.js, 0, 0))
 >A : Symbol(A, Decl(a-ext.js, 0, 0))
 
     this.x = 1;
->this.x : Symbol(A.x, Decl(a-ext.js, 0, 25))
->this : Symbol(A, Decl(a-ext.js, 0, 11))
->x : Symbol(A.x, Decl(a-ext.js, 0, 25))
-
 };
 
 === a.js ===
@@= skipped -20, +16 lines =@@
 function a(p) { p.x; }
 >a : Symbol(a, Decl(a.js, 0, 33))
 >p : Symbol(p, Decl(a.js, 3, 11))
->p.x : Symbol(A.x, Decl(a-ext.js, 0, 25))
 >p : Symbol(p, Decl(a.js, 3, 11))
->x : Symbol(A.x, Decl(a-ext.js, 0, 25))
 
 === b-ext.js ===
 exports.B = class {
 >exports.B : Symbol(B, Decl(b-ext.js, 0, 0))
->exports : Symbol(B, Decl(b-ext.js, 0, 0))
+>exports : Symbol("b-ext", Decl(b-ext.js, 0, 0))
 >B : Symbol(B, Decl(b-ext.js, 0, 0))
 
     constructor() {
         this.x = 1;
->this.x : Symbol(B.x, Decl(b-ext.js, 1, 19))
 >this : Symbol(B, Decl(b-ext.js, 0, 11))
->x : Symbol(B.x, Decl(b-ext.js, 1, 19))
     }
 };
 
@@= skipped -28, +24 lines =@@
 function b(p) { p.x; }
 >b : Symbol(b, Decl(b.js, 0, 33))
 >p : Symbol(p, Decl(b.js, 3, 11))
->p.x : Symbol(B.x, Decl(b-ext.js, 1, 19))
 >p : Symbol(p, Decl(b.js, 3, 11))
->x : Symbol(B.x, Decl(b-ext.js, 1, 19))
 
 === c-ext.js ===
 export function C() {
 >C : Symbol(C, Decl(c-ext.js, 0, 0))
 
     this.x = 1;
->this.x : Symbol(C.x, Decl(c-ext.js, 0, 21))
->this : Symbol(C, Decl(c-ext.js, 0, 0))
->x : Symbol(C.x, Decl(c-ext.js, 0, 21))
 }
 
 === c.js ===
@@= skipped -24, +19 lines =@@
 function c(p) { p.x; }
 >c : Symbol(c, Decl(c.js, 0, 33))
 >p : Symbol(p, Decl(c.js, 3, 11))
->p.x : Symbol(C.x, Decl(c-ext.js, 0, 21))
 >p : Symbol(p, Decl(c.js, 3, 11))
->x : Symbol(C.x, Decl(c-ext.js, 0, 21))
 
 === d-ext.js ===
 export var D = function() {
 >D : Symbol(D, Decl(d-ext.js, 0, 10))
 
     this.x = 1;
->this.x : Symbol(D.x, Decl(d-ext.js, 0, 27))
->this : Symbol(D, Decl(d-ext.js, 0, 14))
->x : Symbol(D.x, Decl(d-ext.js, 0, 27))
-
 };
 
 === d.js ===
@@= skipped -25, +19 lines =@@
 function d(p) { p.x; }
 >d : Symbol(d, Decl(d.js, 0, 33))
 >p : Symbol(p, Decl(d.js, 3, 11))
->p.x : Symbol(D.x, Decl(d-ext.js, 0, 27))
 >p : Symbol(p, Decl(d.js, 3, 11))
->x : Symbol(D.x, Decl(d-ext.js, 0, 27))
 
 === e-ext.js ===
 export class E {
@@= skipped -10, +8 lines =@@
 
     constructor() {
         this.x = 1;
->this.x : Symbol(E.x, Decl(e-ext.js, 1, 19))
 >this : Symbol(E, Decl(e-ext.js, 0, 0))
->x : Symbol(E.x, Decl(e-ext.js, 1, 19))
     }
 }
 
@@= skipped -16, +14 lines =@@
 function e(p) { p.x; }
 >e : Symbol(e, Decl(e.js, 0, 33))
 >p : Symbol(p, Decl(e.js, 3, 11))
->p.x : Symbol(E.x, Decl(e-ext.js, 1, 19))
 >p : Symbol(p, Decl(e.js, 3, 11))
->x : Symbol(E.x, Decl(e-ext.js, 1, 19))
 
 === f.js ===
 var F = function () {
 >F : Symbol(F, Decl(f.js, 0, 3))
 
     this.x = 1;
->this.x : Symbol(F.x, Decl(f.js, 0, 21))
->this : Symbol(F, Decl(f.js, 0, 7))
->x : Symbol(F.x, Decl(f.js, 0, 21))
-
 };
 
 /** @param {F} p */
 function f(p) { p.x; }
 >f : Symbol(f, Decl(f.js, 2, 2))
 >p : Symbol(p, Decl(f.js, 5, 11))
->p.x : Symbol(F.x, Decl(f.js, 0, 21))
 >p : Symbol(p, Decl(f.js, 5, 11))
->x : Symbol(F.x, Decl(f.js, 0, 21))
 
 === g.js ===
 function G() {
 >G : Symbol(G, Decl(g.js, 0, 0))
 
     this.x = 1;
->this.x : Symbol(G.x, Decl(g.js, 0, 14))
->this : Symbol(G, Decl(g.js, 0, 0))
->x : Symbol(G.x, Decl(g.js, 0, 14))
 }
 
 /** @param {G} p */
 function g(p) { p.x; }
 >g : Symbol(g, Decl(g.js, 2, 1))
 >p : Symbol(p, Decl(g.js, 5, 11))
->p.x : Symbol(G.x, Decl(g.js, 0, 14))
 >p : Symbol(p, Decl(g.js, 5, 11))
->x : Symbol(G.x, Decl(g.js, 0, 14))
 
 === h.js ===
 class H {
@@= skipped -47, +34 lines =@@
 
     constructor() {
         this.x = 1;
->this.x : Symbol(H.x, Decl(h.js, 1, 19))
 >this : Symbol(H, Decl(h.js, 0, 0))
->x : Symbol(H.x, Decl(h.js, 1, 19))
     }
 }
 
@@= skipped -10, +8 lines =@@
 function h(p) { p.x; }
 >h : Symbol(h, Decl(h.js, 4, 1))
 >p : Symbol(p, Decl(h.js, 7, 11))
->p.x : Symbol(H.x, Decl(h.js, 1, 19))
 >p : Symbol(p, Decl(h.js, 7, 11))
->x : Symbol(H.x, Decl(h.js, 1, 19))
 
