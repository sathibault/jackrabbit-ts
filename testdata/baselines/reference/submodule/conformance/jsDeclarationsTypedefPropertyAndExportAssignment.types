//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsTypedefPropertyAndExportAssignment.ts] ////

=== index.js ===
const {taskGroups, taskNameToGroup} = require('./module.js');
>taskGroups : { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }
>taskNameToGroup : any
>require('./module.js') : { taskGroups: { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }; taskNameToGroup: any; }
>require : any
>'./module.js' : "./module.js"

/** @typedef {import('./module.js').TaskGroup} TaskGroup */

/**
 * @typedef TaskNode
 * @prop {TaskNode[]} children
 * @prop {TaskNode|undefined} parent
 * @prop {TaskGroup} group
 */

/** @typedef {{timers: Map<string, TaskNode>}} PriorTaskData */
class MainThreadTasks {
>MainThreadTasks : MainThreadTasks

    /**
     * @param {TaskGroup} x
     * @param {TaskNode} y
     */
    constructor(x, y){}
>x : any
>y : TaskNode
}

module.exports = MainThreadTasks;
>module.exports = MainThreadTasks : typeof MainThreadTasks
>module.exports : typeof MainThreadTasks
>module : { MainThreadTasks: typeof MainThreadTasks; }
>exports : typeof MainThreadTasks
>MainThreadTasks : typeof MainThreadTasks

=== module.js ===
/** @typedef {'parseHTML'|'styleLayout'} TaskGroupIds */

/**
 * @typedef TaskGroup
 * @property {TaskGroupIds} id
 * @property {string} label
 * @property {string[]} traceEventNames
 */

/**
 * @type {{[P in TaskGroupIds]: {id: P, label: string}}}
 */
const taskGroups = {
>taskGroups : { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }
>{    parseHTML: {        id: 'parseHTML',        label: 'Parse HTML & CSS'    },    styleLayout: {        id: 'styleLayout',        label: 'Style & Layout'    },} : { parseHTML: { id: string; label: string; }; styleLayout: { id: string; label: string; }; }

    parseHTML: {
>parseHTML : { id: string; label: string; }
>{        id: 'parseHTML',        label: 'Parse HTML & CSS'    } : { id: string; label: string; }

        id: 'parseHTML',
>id : string
>'parseHTML' : "parseHTML"

        label: 'Parse HTML & CSS'
>label : string
>'Parse HTML & CSS' : "Parse HTML & CSS"

    },
    styleLayout: {
>styleLayout : { id: string; label: string; }
>{        id: 'styleLayout',        label: 'Style & Layout'    } : { id: string; label: string; }

        id: 'styleLayout',
>id : string
>'styleLayout' : "styleLayout"

        label: 'Style & Layout'
>label : string
>'Style & Layout' : "Style & Layout"

    },
}

/** @type {Object<string, TaskGroup>} */
const taskNameToGroup = {};
>taskNameToGroup : any
>{} : {}

module.exports = {
>module.exports = {    taskGroups,    taskNameToGroup,} : { taskGroups: { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }; taskNameToGroup: any; }
>module.exports : { taskGroups: { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }; taskNameToGroup: any; }
>module : { export=: { taskGroups: { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }; taskNameToGroup: any; }; }
>exports : { taskGroups: { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }; taskNameToGroup: any; }
>{    taskGroups,    taskNameToGroup,} : { taskGroups: { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }; taskNameToGroup: any; }

    taskGroups,
>taskGroups : { parseHTML: { id: P; label: string; }; styleLayout: { id: P; label: string; }; }

    taskNameToGroup,
>taskNameToGroup : any

};
