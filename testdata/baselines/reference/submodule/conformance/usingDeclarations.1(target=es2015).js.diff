--- old.usingDeclarations.1(target=es2015).js
+++ new.usingDeclarations.1(target=es2015).js
@@= skipped -153, +153 lines =@@
 export {};
 
 //// [usingDeclarations.1.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
     if (value !== null && value !== void 0) {
         if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
@@= skipped -61, +52 lines =@@
     var e = new Error(message);
     return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
 });
-var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
-var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
-    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
-    var g = generator.apply(thisArg, _arguments || []), i, q = [];
-    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
-    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
-    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
-    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
-    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
-    function fulfill(value) { resume("next", value); }
-    function reject(value) { resume("throw", value); }
-    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
-};
-var _a;
+var d1, a, C1, C2, C3, N, env_1;
 function f() {
     const env_15 = { stack: [], error: void 0, hasError: false };
     try {
@@= skipped -27, +14 lines =@@
         __disposeResources(env_15);
     }
 }
-function af() {
-    return __awaiter(this, void 0, void 0, function* () {
-        const env_16 = { stack: [], error: void 0, hasError: false };
-        try {
-            const d3 = __addDisposableResource(env_16, { [Symbol.dispose]() { } }, false);
-            yield null;
-        }
-        catch (e_16) {
-            env_16.error = e_16;
-            env_16.hasError = true;
-        }
-        finally {
-            __disposeResources(env_16);
-        }
-    });
+async function af() {
+    const env_16 = { stack: [], error: void 0, hasError: false };
+    try {
+        const d3 = __addDisposableResource(env_16, { [Symbol.dispose]() { } }, false);
+        await null;
+    }
+    catch (e_16) {
+        env_16.error = e_16;
+        env_16.hasError = true;
+    }
+    finally {
+        __disposeResources(env_16);
+    }
 }
 function* g() {
     const env_17 = { stack: [], error: void 0, hasError: false };
@@= skipped -30, +28 lines =@@
         __disposeResources(env_17);
     }
 }
-function ag() {
-    return __asyncGenerator(this, arguments, function* ag_1() {
-        const env_18 = { stack: [], error: void 0, hasError: false };
-        try {
-            const d5 = __addDisposableResource(env_18, { [Symbol.dispose]() { } }, false);
-            yield yield __await(void 0);
-            yield __await(null);
-        }
-        catch (e_18) {
-            env_18.error = e_18;
-            env_18.hasError = true;
-        }
-        finally {
-            __disposeResources(env_18);
-        }
-    });
+async function* ag() {
+    const env_18 = { stack: [], error: void 0, hasError: false };
+    try {
+        const d5 = __addDisposableResource(env_18, { [Symbol.dispose]() { } }, false);
+        yield;
+        await null;
+    }
+    catch (e_18) {
+        env_18.error = e_18;
+        env_18.hasError = true;
+    }
+    finally {
+        __disposeResources(env_18);
+    }
 }
-var d1, a, C1, C2, C3, N, env_1;
 const env_2 = { stack: [], error: void 0, hasError: false };
 try {
     d1 = __addDisposableResource(env_2, { [Symbol.dispose]() { } }, false);
@@= skipped -34, +31 lines =@@
             __disposeResources(env_19);
         }
     };
-    C1 = (_a = class C1 {
-            constructor() {
-                this.a = () => {
-                    const env_21 = { stack: [], error: void 0, hasError: false };
-                    try {
-                        const d7 = __addDisposableResource(env_21, { [Symbol.dispose]() { } }, false);
-                    }
-                    catch (e_21) {
-                        env_21.error = e_21;
-                        env_21.hasError = true;
-                    }
-                    finally {
-                        __disposeResources(env_21);
-                    }
-                };
-                const env_20 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d8 = __addDisposableResource(env_20, { [Symbol.dispose]() { } }, false);
-                }
-                catch (e_20) {
-                    env_20.error = e_20;
-                    env_20.hasError = true;
-                }
-                finally {
-                    __disposeResources(env_20);
-                }
+    C1 = class C1 {
+        a = () => {
+            const env_20 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d7 = __addDisposableResource(env_20, { [Symbol.dispose]() { } }, false);
             }
-            m() {
-                const env_22 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d10 = __addDisposableResource(env_22, { [Symbol.dispose]() { } }, false);
-                }
-                catch (e_22) {
-                    env_22.error = e_22;
-                    env_22.hasError = true;
-                }
-                finally {
-                    __disposeResources(env_22);
-                }
+            catch (e_20) {
+                env_20.error = e_20;
+                env_20.hasError = true;
             }
-            get x() {
-                const env_23 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d11 = __addDisposableResource(env_23, { [Symbol.dispose]() { } }, false);
-                    return 0;
-                }
-                catch (e_23) {
-                    env_23.error = e_23;
-                    env_23.hasError = true;
-                }
-                finally {
-                    __disposeResources(env_23);
-                }
+            finally {
+                __disposeResources(env_20);
             }
-            set x(v) {
-                const env_24 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d12 = __addDisposableResource(env_24, { [Symbol.dispose]() { } }, false);
-                }
-                catch (e_24) {
-                    env_24.error = e_24;
-                    env_24.hasError = true;
-                }
-                finally {
-                    __disposeResources(env_24);
-                }
+        };
+        constructor() {
+            const env_21 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d8 = __addDisposableResource(env_21, { [Symbol.dispose]() { } }, false);
             }
-            am() {
-                return __awaiter(this, void 0, void 0, function* () {
-                    const env_25 = { stack: [], error: void 0, hasError: false };
-                    try {
-                        const d13 = __addDisposableResource(env_25, { [Symbol.dispose]() { } }, false);
-                        yield null;
-                    }
-                    catch (e_25) {
-                        env_25.error = e_25;
-                        env_25.hasError = true;
-                    }
-                    finally {
-                        __disposeResources(env_25);
-                    }
-                });
+            catch (e_21) {
+                env_21.error = e_21;
+                env_21.hasError = true;
             }
-            *g() {
-                const env_26 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d14 = __addDisposableResource(env_26, { [Symbol.dispose]() { } }, false);
-                    yield;
-                }
-                catch (e_26) {
-                    env_26.error = e_26;
-                    env_26.hasError = true;
-                }
-                finally {
-                    __disposeResources(env_26);
-                }
+            finally {
+                __disposeResources(env_21);
             }
-            ag() {
-                return __asyncGenerator(this, arguments, function* ag_2() {
-                    const env_27 = { stack: [], error: void 0, hasError: false };
-                    try {
-                        const d15 = __addDisposableResource(env_27, { [Symbol.dispose]() { } }, false);
-                        yield yield __await(void 0);
-                        yield __await(null);
-                    }
-                    catch (e_27) {
-                        env_27.error = e_27;
-                        env_27.hasError = true;
-                    }
-                    finally {
-                        __disposeResources(env_27);
-                    }
-                });
+        }
+        static {
+            const env_22 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d9 = __addDisposableResource(env_22, { [Symbol.dispose]() { } }, false);
             }
-        },
-        (() => {
+            catch (e_22) {
+                env_22.error = e_22;
+                env_22.hasError = true;
+            }
+            finally {
+                __disposeResources(env_22);
+            }
+        }
+        m() {
+            const env_23 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d10 = __addDisposableResource(env_23, { [Symbol.dispose]() { } }, false);
+            }
+            catch (e_23) {
+                env_23.error = e_23;
+                env_23.hasError = true;
+            }
+            finally {
+                __disposeResources(env_23);
+            }
+        }
+        get x() {
+            const env_24 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d11 = __addDisposableResource(env_24, { [Symbol.dispose]() { } }, false);
+                return 0;
+            }
+            catch (e_24) {
+                env_24.error = e_24;
+                env_24.hasError = true;
+            }
+            finally {
+                __disposeResources(env_24);
+            }
+        }
+        set x(v) {
+            const env_25 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d12 = __addDisposableResource(env_25, { [Symbol.dispose]() { } }, false);
+            }
+            catch (e_25) {
+                env_25.error = e_25;
+                env_25.hasError = true;
+            }
+            finally {
+                __disposeResources(env_25);
+            }
+        }
+        async am() {
+            const env_26 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d13 = __addDisposableResource(env_26, { [Symbol.dispose]() { } }, false);
+                await null;
+            }
+            catch (e_26) {
+                env_26.error = e_26;
+                env_26.hasError = true;
+            }
+            finally {
+                __disposeResources(env_26);
+            }
+        }
+        *g() {
+            const env_27 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d14 = __addDisposableResource(env_27, { [Symbol.dispose]() { } }, false);
+                yield;
+            }
+            catch (e_27) {
+                env_27.error = e_27;
+                env_27.hasError = true;
+            }
+            finally {
+                __disposeResources(env_27);
+            }
+        }
+        async *ag() {
             const env_28 = { stack: [], error: void 0, hasError: false };
             try {
-                const d9 = __addDisposableResource(env_28, { [Symbol.dispose]() { } }, false);
+                const d15 = __addDisposableResource(env_28, { [Symbol.dispose]() { } }, false);
+                yield;
+                await null;
             }
             catch (e_28) {
                 env_28.error = e_28;
@@= skipped -127, +122 lines =@@
             finally {
                 __disposeResources(env_28);
             }
-        })(),
-        _a);
+        }
+    };
     C2 = class C2 extends C1 {
         constructor() {
             const env_29 = { stack: [], error: void 0, hasError: false };
@@= skipped -19, +19 lines =@@
         }
     };
     C3 = class C3 extends C1 {
+        y = 1;
         constructor() {
             const env_30 = { stack: [], error: void 0, hasError: false };
             try {
                 const d17 = __addDisposableResource(env_30, { [Symbol.dispose]() { } }, false);
                 super();
-                this.y = 1;
             }
             catch (e_30) {
                 env_30.error = e_30;
@@= skipped -90, +90 lines =@@
             __disposeResources(env_5);
         }
     }
-    catch (_b) {
+    catch {
         const env_6 = { stack: [], error: void 0, hasError: false };
         try {
             const d24 = __addDisposableResource(env_6, { [Symbol.dispose]() { } }, false);
