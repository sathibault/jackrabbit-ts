--- old.awaitUsingDeclarations.1(target=es2015).js
+++ new.awaitUsingDeclarations.1(target=es2015).js
@@= skipped -99, +99 lines =@@
 export {};
 
 //// [awaitUsingDeclarations.1.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
     if (value !== null && value !== void 0) {
         if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
@@= skipped -61, +52 lines =@@
     var e = new Error(message);
     return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
 });
-var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
-var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
-    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
-    var g = generator.apply(thisArg, _arguments || []), i, q = [];
-    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
-    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
-    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
-    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
-    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
-    function fulfill(value) { resume("next", value); }
-    function reject(value) { resume("throw", value); }
-    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
-};
-function af() {
-    return __awaiter(this, void 0, void 0, function* () {
-        const env_15 = { stack: [], error: void 0, hasError: false };
-        try {
-            const d3 = __addDisposableResource(env_15, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
-            yield null;
-        }
-        catch (e_15) {
-            env_15.error = e_15;
-            env_15.hasError = true;
-        }
-        finally {
-            const result_15 = __disposeResources(env_15);
-            if (result_15)
-                yield result_15;
-        }
-    });
+var d1, a, C1, env_1;
+async function af() {
+    const env_15 = { stack: [], error: void 0, hasError: false };
+    try {
+        const d3 = __addDisposableResource(env_15, { async [Symbol.asyncDispose]() { } }, true);
+        await null;
+    }
+    catch (e_15) {
+        env_15.error = e_15;
+        env_15.hasError = true;
+    }
+    finally {
+        const result_15 = __disposeResources(env_15);
+        if (result_15)
+            await result_15;
+    }
 }
-function ag() {
-    return __asyncGenerator(this, arguments, function* ag_1() {
-        const env_16 = { stack: [], error: void 0, hasError: false };
-        try {
-            const d5 = __addDisposableResource(env_16, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
-            yield yield __await(void 0);
-            yield __await(null);
-        }
-        catch (e_16) {
-            env_16.error = e_16;
-            env_16.hasError = true;
-        }
-        finally {
-            const result_16 = __disposeResources(env_16);
-            if (result_16)
-                yield __await(result_16);
-        }
-    });
+async function* ag() {
+    const env_16 = { stack: [], error: void 0, hasError: false };
+    try {
+        const d5 = __addDisposableResource(env_16, { async [Symbol.asyncDispose]() { } }, true);
+        yield;
+        await null;
+    }
+    catch (e_16) {
+        env_16.error = e_16;
+        env_16.hasError = true;
+    }
+    finally {
+        const result_16 = __disposeResources(env_16);
+        if (result_16)
+            await result_16;
+    }
 }
-var d1, a, C1, env_1;
 const env_2 = { stack: [], error: void 0, hasError: false };
 try {
-    d1 = __addDisposableResource(env_2, { [Symbol.asyncDispose]() {
-            return __awaiter(this, void 0, void 0, function* () { });
-        } }, true);
-    a = () => __awaiter(void 0, void 0, void 0, function* () {
+    d1 = __addDisposableResource(env_2, { async [Symbol.asyncDispose]() { } }, true);
+    a = async () => {
         const env_17 = { stack: [], error: void 0, hasError: false };
         try {
-            const d6 = __addDisposableResource(env_17, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d6 = __addDisposableResource(env_17, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_17) {
             env_17.error = e_17;
@@= skipped -74, +49 lines =@@
         finally {
             const result_17 = __disposeResources(env_17);
             if (result_17)
-                yield result_17;
+                await result_17;
         }
-    });
+    };
     C1 = class C1 {
-        constructor() {
-            this.a = () => __awaiter(this, void 0, void 0, function* () {
-                const env_18 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d7 = __addDisposableResource(env_18, { [Symbol.asyncDispose]() {
-                            return __awaiter(this, void 0, void 0, function* () { });
-                        } }, true);
-                }
-                catch (e_18) {
-                    env_18.error = e_18;
-                    env_18.hasError = true;
-                }
-                finally {
-                    const result_18 = __disposeResources(env_18);
-                    if (result_18)
-                        yield result_18;
-                }
-            });
+        a = async () => {
+            const env_18 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d7 = __addDisposableResource(env_18, { async [Symbol.asyncDispose]() { } }, true);
+            }
+            catch (e_18) {
+                env_18.error = e_18;
+                env_18.hasError = true;
+            }
+            finally {
+                const result_18 = __disposeResources(env_18);
+                if (result_18)
+                    await result_18;
+            }
+        };
+        async am() {
+            const env_19 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d13 = __addDisposableResource(env_19, { async [Symbol.asyncDispose]() { } }, true);
+                await null;
+            }
+            catch (e_19) {
+                env_19.error = e_19;
+                env_19.hasError = true;
+            }
+            finally {
+                const result_19 = __disposeResources(env_19);
+                if (result_19)
+                    await result_19;
+            }
         }
-        am() {
-            return __awaiter(this, void 0, void 0, function* () {
-                const env_19 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d13 = __addDisposableResource(env_19, { [Symbol.asyncDispose]() {
-                            return __awaiter(this, void 0, void 0, function* () { });
-                        } }, true);
-                    yield null;
-                }
-                catch (e_19) {
-                    env_19.error = e_19;
-                    env_19.hasError = true;
-                }
-                finally {
-                    const result_19 = __disposeResources(env_19);
-                    if (result_19)
-                        yield result_19;
-                }
-            });
+        async *ag() {
+            const env_20 = { stack: [], error: void 0, hasError: false };
+            try {
+                const d15 = __addDisposableResource(env_20, { async [Symbol.asyncDispose]() { } }, true);
+                yield;
+                await null;
+            }
+            catch (e_20) {
+                env_20.error = e_20;
+                env_20.hasError = true;
+            }
+            finally {
+                const result_20 = __disposeResources(env_20);
+                if (result_20)
+                    await result_20;
+            }
         }
-        ag() {
-            return __asyncGenerator(this, arguments, function* ag_2() {
-                const env_20 = { stack: [], error: void 0, hasError: false };
-                try {
-                    const d15 = __addDisposableResource(env_20, { [Symbol.asyncDispose]() {
-                            return __awaiter(this, void 0, void 0, function* () { });
-                        } }, true);
-                    yield yield __await(void 0);
-                    yield __await(null);
-                }
-                catch (e_20) {
-                    env_20.error = e_20;
-                    env_20.hasError = true;
-                }
-                finally {
-                    const result_20 = __disposeResources(env_20);
-                    if (result_20)
-                        yield __await(result_20);
-                }
-            });
-        }
     };
     {
         const env_3 = { stack: [], error: void 0, hasError: false };
         try {
-            const d19 = __addDisposableResource(env_3, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d19 = __addDisposableResource(env_3, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_1) {
             env_3.error = e_1;
@@= skipped -86, +72 lines =@@
     try {
         switch (Math.random()) {
             case 0:
-                const d20 = __addDisposableResource(env_1, { [Symbol.asyncDispose]() {
-                        return __awaiter(this, void 0, void 0, function* () { });
-                    } }, true);
+                const d20 = __addDisposableResource(env_1, { async [Symbol.asyncDispose]() { } }, true);
                 break;
             case 1:
-                const d21 = __addDisposableResource(env_1, { [Symbol.asyncDispose]() {
-                        return __awaiter(this, void 0, void 0, function* () { });
-                    } }, true);
+                const d21 = __addDisposableResource(env_1, { async [Symbol.asyncDispose]() { } }, true);
                 break;
         }
     }
@@= skipped -25, +21 lines =@@
         try {
             switch (0) {
                 case 0:
-                    const d22 = __addDisposableResource(env_4, { [Symbol.asyncDispose]() {
-                            return __awaiter(this, void 0, void 0, function* () { });
-                        } }, true);
+                    const d22 = __addDisposableResource(env_4, { async [Symbol.asyncDispose]() { } }, true);
                     break;
             }
         }
@@= skipped -19, +17 lines =@@
     try {
         const env_5 = { stack: [], error: void 0, hasError: false };
         try {
-            const d23 = __addDisposableResource(env_5, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d23 = __addDisposableResource(env_5, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_4) {
             env_5.error = e_4;
@@= skipped -14, +12 lines =@@
                 await result_4;
         }
     }
-    catch (_a) {
+    catch {
         const env_6 = { stack: [], error: void 0, hasError: false };
         try {
-            const d24 = __addDisposableResource(env_6, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d24 = __addDisposableResource(env_6, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_5) {
             env_6.error = e_5;
@@= skipped -20, +18 lines =@@
     finally {
         const env_7 = { stack: [], error: void 0, hasError: false };
         try {
-            const d25 = __addDisposableResource(env_7, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d25 = __addDisposableResource(env_7, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_6) {
             env_7.error = e_6;
@@= skipped -17, +15 lines =@@
     if (true) {
         const env_8 = { stack: [], error: void 0, hasError: false };
         try {
-            const d26 = __addDisposableResource(env_8, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d26 = __addDisposableResource(env_8, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_7) {
             env_8.error = e_7;
@@= skipped -17, +15 lines =@@
     else {
         const env_9 = { stack: [], error: void 0, hasError: false };
         try {
-            const d27 = __addDisposableResource(env_9, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d27 = __addDisposableResource(env_9, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_8) {
             env_9.error = e_8;
@@= skipped -17, +15 lines =@@
     while (true) {
         const env_10 = { stack: [], error: void 0, hasError: false };
         try {
-            const d28 = __addDisposableResource(env_10, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d28 = __addDisposableResource(env_10, { async [Symbol.asyncDispose]() { } }, true);
             break;
         }
         catch (e_9) {
@@= skipped -18, +16 lines =@@
     do {
         const env_11 = { stack: [], error: void 0, hasError: false };
         try {
-            const d29 = __addDisposableResource(env_11, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d29 = __addDisposableResource(env_11, { async [Symbol.asyncDispose]() { } }, true);
             break;
         }
         catch (e_10) {
@@= skipped -18, +16 lines =@@
     for (;;) {
         const env_12 = { stack: [], error: void 0, hasError: false };
         try {
-            const d30 = __addDisposableResource(env_12, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d30 = __addDisposableResource(env_12, { async [Symbol.asyncDispose]() { } }, true);
             break;
         }
         catch (e_11) {
@@= skipped -18, +16 lines =@@
     for (const x in {}) {
         const env_13 = { stack: [], error: void 0, hasError: false };
         try {
-            const d31 = __addDisposableResource(env_13, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d31 = __addDisposableResource(env_13, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_12) {
             env_13.error = e_12;
@@= skipped -17, +15 lines =@@
     for (const x of []) {
         const env_14 = { stack: [], error: void 0, hasError: false };
         try {
-            const d32 = __addDisposableResource(env_14, { [Symbol.asyncDispose]() {
-                    return __awaiter(this, void 0, void 0, function* () { });
-                } }, true);
+            const d32 = __addDisposableResource(env_14, { async [Symbol.asyncDispose]() { } }, true);
         }
         catch (e_13) {
             env_14.error = e_13;
