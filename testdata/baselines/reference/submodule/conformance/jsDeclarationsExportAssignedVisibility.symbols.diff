--- old.jsDeclarationsExportAssignedVisibility.symbols
+++ new.jsDeclarationsExportAssignedVisibility.symbols
@@= skipped -10, +10 lines =@@
 
     constructor() {
         this.usage = new Obj();
->this.usage : Symbol(Container.usage, Decl(index.js, 3, 19))
 >this : Symbol(Container, Decl(index.js, 0, 29))
->usage : Symbol(Container.usage, Decl(index.js, 3, 19))
 >Obj : Symbol(Obj, Decl(index.js, 0, 5))
     }
 }
 
 module.exports = Container;
->module.exports : Symbol(module.exports, Decl(index.js, 0, 0))
->module : Symbol(export=, Decl(index.js, 6, 1))
->exports : Symbol(export=, Decl(index.js, 6, 1))
+>module.exports : Symbol(Container, Decl(index.js, 0, 29))
+>module : Symbol(module.exports)
+>exports : Symbol(Container, Decl(index.js, 0, 29))
 >Container : Symbol(Container, Decl(index.js, 0, 29))
 
 === obj.js ===
 module.exports = class Obj {
->module.exports : Symbol(module.exports, Decl(obj.js, 0, 0))
->module : Symbol(export=, Decl(obj.js, 0, 0))
->exports : Symbol(export=, Decl(obj.js, 0, 0))
+>module.exports : Symbol(Obj, Decl(obj.js, 0, 16))
+>module : Symbol(module.exports)
+>exports : Symbol(Obj, Decl(obj.js, 0, 16))
 >Obj : Symbol(Obj, Decl(obj.js, 0, 16))
 
     constructor() {
         this.x = 12;
->this.x : Symbol(Obj.x, Decl(obj.js, 1, 19))
 >this : Symbol(Obj, Decl(obj.js, 0, 16))
->x : Symbol(Obj.x, Decl(obj.js, 1, 19))
     }
 }
