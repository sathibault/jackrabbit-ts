//// [tests/cases/conformance/jsdoc/jsdocTypeFromChainedAssignment2.ts] ////

=== use.js ===
var mod = require('./mod');
>mod : Symbol(mod, Decl(use.js, 0, 3))
>require : Symbol(require)
>'./mod' : Symbol("mod", Decl(mod.js, 0, 0))

mod.f('no')
>mod.f : Symbol(f, Decl(mod.js, 0, 0))
>mod : Symbol(mod, Decl(use.js, 0, 3))
>f : Symbol(f, Decl(mod.js, 0, 0))

mod.g('also no')
>mod : Symbol(mod, Decl(use.js, 0, 3))

mod.h(0)
>mod.h : Symbol(h, Decl(mod.js, 3, 1))
>mod : Symbol(mod, Decl(use.js, 0, 3))
>h : Symbol(h, Decl(mod.js, 3, 1))

mod.i(1)
>mod : Symbol(mod, Decl(use.js, 0, 3))

=== mod.js ===
/** @param {number} n */
exports.f = exports.g = function fg(n) {
>exports.f : Symbol(f, Decl(mod.js, 0, 0))
>exports : Symbol("mod", Decl(mod.js, 0, 0))
>f : Symbol(f, Decl(mod.js, 0, 0))
>exports : Symbol("mod", Decl(mod.js, 0, 0))
>fg : Symbol(fg, Decl(mod.js, 1, 23))
>n : Symbol(n, Decl(mod.js, 1, 36))

    return n + 1
>n : Symbol(n, Decl(mod.js, 1, 36))
}
/** @param {string} mom */
module.exports.h = module.exports.i = function hi(mom) {
>module.exports.h : Symbol(h, Decl(mod.js, 3, 1))
>module.exports : Symbol("mod", Decl(mod.js, 0, 0))
>module : Symbol(module.exports)
>exports : Symbol("mod", Decl(mod.js, 0, 0))
>h : Symbol(h, Decl(mod.js, 3, 1))
>module.exports : Symbol("mod", Decl(mod.js, 0, 0))
>module : Symbol(module.exports)
>exports : Symbol("mod", Decl(mod.js, 0, 0))
>hi : Symbol(hi, Decl(mod.js, 5, 37))
>mom : Symbol(mom, Decl(mod.js, 5, 50))

    return `hi, ${mom}!`;
>mom : Symbol(mom, Decl(mod.js, 5, 50))
}

