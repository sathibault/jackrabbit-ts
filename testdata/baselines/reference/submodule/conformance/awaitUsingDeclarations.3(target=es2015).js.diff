--- old.awaitUsingDeclarations.3(target=es2015).js
+++ new.awaitUsingDeclarations.3(target=es2015).js
@@= skipped -10, +10 lines =@@
 export {};
 
 //// [awaitUsingDeclarations.3.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
     if (value !== null && value !== void 0) {
         if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
@@= skipped -64, +55 lines =@@
 {
     const env_1 = { stack: [], error: void 0, hasError: false };
     try {
-        const d1 = __addDisposableResource(env_1, { [Symbol.asyncDispose]() {
-                return __awaiter(this, void 0, void 0, function* () { });
-            } }, true), d2 = __addDisposableResource(env_1, null, true), d3 = __addDisposableResource(env_1, undefined, true), d4 = __addDisposableResource(env_1, { [Symbol.dispose]() { } }, true);
+        const d1 = __addDisposableResource(env_1, { async [Symbol.asyncDispose]() { } }, true), d2 = __addDisposableResource(env_1, null, true), d3 = __addDisposableResource(env_1, undefined, true), d4 = __addDisposableResource(env_1, { [Symbol.dispose]() { } }, true);
     }
     catch (e_1) {
         env_1.error = e_1;
