--- old.awaitUsingDeclarationsInForOf.5(target=es5).js
+++ new.awaitUsingDeclarationsInForOf.5(target=es5).js
@@= skipped -12, +12 lines =@@
 
 
 //// [awaitUsingDeclarationsInForOf.5.js]
-// https://github.com/microsoft/TypeScript/pull/55558#issuecomment-1817595357
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
-    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
-    function verb(n) { return function (v) { return step([n, v]); }; }
-    function step(op) {
-        if (f) throw new TypeError("Generator is already executing.");
-        while (g && (g = 0, op[0] && (_ = 0)), _) try {
-            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
-            if (y = 0, t) op = [op[0] & 2, t.value];
-            switch (op[0]) {
-                case 0: case 1: t = op; break;
-                case 4: _.label++; return { value: op[1], done: false };
-                case 5: _.label++; y = op[1]; op = [0]; continue;
-                case 7: op = _.ops.pop(); _.trys.pop(); continue;
-                default:
-                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
-                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
-                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
-                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
-                    if (t[2]) _.ops.pop();
-                    _.trys.pop(); continue;
-            }
-            op = body.call(thisArg, _);
-        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
-        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
-    }
-};
 var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
     if (value !== null && value !== void 0) {
         if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
@@= skipped -89, +52 lines =@@
     var e = new Error(message);
     return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
 });
-for (var _i = 0, x_1 = x; _i < x_1.length; _i++) {
-    var _a_1 = x_1[_i];
-    var env_1 = { stack: [], error: void 0, hasError: false };
+for (const _a_1 of x) {
+    const env_1 = { stack: [], error: void 0, hasError: false };
     try {
-        var _a = __addDisposableResource(env_1, _a_1, true);
+        const _a = __addDisposableResource(env_1, _a_1, true);
         ;
     }
     catch (e_1) {
@@= skipped -12, +11 lines =@@
         env_1.hasError = true;
     }
     finally {
-        var result_1 = __disposeResources(env_1);
+        const result_1 = __disposeResources(env_1);
         if (result_1)
             await result_1;
     }
 }
-export function test() {
-    return __awaiter(this, void 0, void 0, function () {
-        var _i, x_2, _a_2, env_2, _a, e_2, result_2;
-        return __generator(this, function (_b) {
-            switch (_b.label) {
-                case 0:
-                    _i = 0, x_2 = x;
-                    _b.label = 1;
-                case 1:
-                    if (!(_i < x_2.length)) return [3 /*break*/, 8];
-                    _a_2 = x_2[_i];
-                    env_2 = { stack: [], error: void 0, hasError: false };
-                    _b.label = 2;
-                case 2:
-                    _b.trys.push([2, 3, 4, 7]);
-                    _a = __addDisposableResource(env_2, _a_2, true);
-                    ;
-                    return [3 /*break*/, 7];
-                case 3:
-                    e_2 = _b.sent();
-                    env_2.error = e_2;
-                    env_2.hasError = true;
-                    return [3 /*break*/, 7];
-                case 4:
-                    result_2 = __disposeResources(env_2);
-                    if (!result_2) return [3 /*break*/, 6];
-                    return [4 /*yield*/, result_2];
-                case 5:
-                    _b.sent();
-                    _b.label = 6;
-                case 6: return [7 /*endfinally*/];
-                case 7:
-                    _i++;
-                    return [3 /*break*/, 1];
-                case 8: return [2 /*return*/];
-            }
-        });
-    });
+export async function test() {
+    for (const _a_2 of x) {
+        const env_2 = { stack: [], error: void 0, hasError: false };
+        try {
+            const _a = __addDisposableResource(env_2, _a_2, true);
+            ;
+        }
+        catch (e_2) {
+            env_2.error = e_2;
+            env_2.hasError = true;
+        }
+        finally {
+            const result_2 = __disposeResources(env_2);
+            if (result_2)
+                await result_2;
+        }
+    }
 }
