--- old.contextualTypedSpecialAssignment.symbols
+++ new.contextualTypedSpecialAssignment.symbols
@@= skipped -7, +7 lines =@@
 
 // property assignment
 var ns = {}
->ns : Symbol(ns, Decl(test.js, 6, 3), Decl(test.js, 6, 11), Decl(test.js, 11, 1))
+>ns : Symbol(ns, Decl(test.js, 6, 3))
 
 /** @type {DoneStatus} */
 ns.x = {
->ns.x : Symbol(ns.x, Decl(test.js, 6, 11), Decl(test.js, 11, 1))
->ns : Symbol(ns, Decl(test.js, 6, 3), Decl(test.js, 6, 11), Decl(test.js, 11, 1))
->x : Symbol(ns.x, Decl(test.js, 6, 11), Decl(test.js, 11, 1))
+>ns : Symbol(ns, Decl(test.js, 6, 3))
 
     status: 'done',
 >status : Symbol(status, Decl(test.js, 8, 8))
@@= skipped -17, +15 lines =@@
 }
 
 ns.x = {
->ns.x : Symbol(ns.x, Decl(test.js, 6, 11), Decl(test.js, 11, 1))
->ns : Symbol(ns, Decl(test.js, 6, 3), Decl(test.js, 6, 11), Decl(test.js, 11, 1))
->x : Symbol(ns.x, Decl(test.js, 6, 11), Decl(test.js, 11, 1))
+>ns : Symbol(ns, Decl(test.js, 6, 3))
 
     status: 'done',
 >status : Symbol(status, Decl(test.js, 13, 8))
@@= skipped -12, +10 lines =@@
 >n : Symbol(n, Decl(test.js, 15, 6))
 }
 ns.x
->ns.x : Symbol(ns.x, Decl(test.js, 6, 11), Decl(test.js, 11, 1))
->ns : Symbol(ns, Decl(test.js, 6, 3), Decl(test.js, 6, 11), Decl(test.js, 11, 1))
->x : Symbol(ns.x, Decl(test.js, 6, 11), Decl(test.js, 11, 1))
+>ns : Symbol(ns, Decl(test.js, 6, 3))
 
 
 // this-property assignment
@@= skipped -12, +10 lines =@@
     constructor() {
         /** @type {DoneStatus} */
         this.s = {
->this.s : Symbol(Thing.s, Decl(test.js, 22, 19), Decl(test.js, 30, 12))
 >this : Symbol(Thing, Decl(test.js, 17, 4))
->s : Symbol(Thing.s, Decl(test.js, 22, 19), Decl(test.js, 30, 12))
 
             status: 'done',
 >status : Symbol(status, Decl(test.js, 24, 18))
@@= skipped -14, +12 lines =@@
     }
 
     fail() {
->fail : Symbol(Thing.fail, Decl(test.js, 28, 5))
+>fail : Symbol(fail, Decl(test.js, 28, 5))
 
         this.s = {
->this.s : Symbol(Thing.s, Decl(test.js, 22, 19), Decl(test.js, 30, 12))
 >this : Symbol(Thing, Decl(test.js, 17, 4))
->s : Symbol(Thing.s, Decl(test.js, 22, 19), Decl(test.js, 30, 12))
 
             status: 'done',
 >status : Symbol(status, Decl(test.js, 31, 18))
@@= skipped -22, +20 lines =@@
 /** @type {DoneStatus} */
 exports.x = {
 >exports.x : Symbol(x, Decl(test.js, 36, 1))
->exports : Symbol(x, Decl(test.js, 36, 1))
+>exports : Symbol("test", Decl(test.js, 0, 0))
 >x : Symbol(x, Decl(test.js, 36, 1))
 
     status: "done",
@@= skipped -18, +18 lines =@@
 /** @type {DoneStatus} */
 module.exports.y = {
 >module.exports.y : Symbol(y, Decl(test.js, 45, 9))
->module.exports : Symbol(y, Decl(test.js, 45, 9))
->module : Symbol(module, Decl(test.js, 45, 9))
->exports : Symbol(module.exports, Decl(test.js, 0, 0))
+>module.exports : Symbol("test", Decl(test.js, 0, 0))
+>module : Symbol(module.exports)
+>exports : Symbol("test", Decl(test.js, 0, 0))
 >y : Symbol(y, Decl(test.js, 45, 9))
 
     status: "done",
@@= skipped -14, +14 lines =@@
 }
 module.exports.y
 >module.exports.y : Symbol(y, Decl(test.js, 45, 9))
->module.exports : Symbol(module.exports, Decl(test.js, 0, 0))
->module : Symbol(module, Decl(test.js, 45, 9))
->exports : Symbol(module.exports, Decl(test.js, 0, 0))
+>module.exports : Symbol("test", Decl(test.js, 0, 0))
+>module : Symbol(module.exports)
+>exports : Symbol("test", Decl(test.js, 0, 0))
 >y : Symbol(y, Decl(test.js, 45, 9))
 
 // prototype-property assignment
 /** @type {DoneStatus} */
 Thing.prototype.x = {
->Thing.prototype.x : Symbol(Thing.x, Decl(test.js, 52, 16))
->Thing.prototype : Symbol(Thing.x, Decl(test.js, 52, 16))
+>Thing.prototype : Symbol(prototype)
 >Thing : Symbol(Thing, Decl(test.js, 17, 4))
->prototype : Symbol(Thing.prototype)
->x : Symbol(Thing.x, Decl(test.js, 52, 16))
+>prototype : Symbol(prototype)
 
     status: 'done',
 >status : Symbol(status, Decl(test.js, 56, 21))
@@= skipped -22, +20 lines =@@
 >n : Symbol(n, Decl(test.js, 58, 6))
 }
 Thing.prototype.x
->Thing.prototype.x : Symbol(Thing.x, Decl(test.js, 52, 16))
->Thing.prototype : Symbol(Thing.prototype)
+>Thing.prototype : Symbol(prototype)
 >Thing : Symbol(Thing, Decl(test.js, 17, 4))
->prototype : Symbol(Thing.prototype)
->x : Symbol(Thing.x, Decl(test.js, 52, 16))
+>prototype : Symbol(prototype)
 
 // prototype assignment
 function F() {
->F : Symbol(F, Decl(test.js, 60, 17), Decl(test.js, 64, 1))
+>F : Symbol(F, Decl(test.js, 60, 17))
 }
 /** @type {DoneStatus} */
 F.prototype = {
->F.prototype : Symbol(F.prototype, Decl(test.js, 64, 1))
->F : Symbol(F, Decl(test.js, 60, 17), Decl(test.js, 64, 1))
->prototype : Symbol(F.prototype, Decl(test.js, 64, 1))
+>F.prototype : Symbol(prototype, Decl(test.js, 64, 1))
+>F : Symbol(F, Decl(test.js, 60, 17))
+>prototype : Symbol(prototype, Decl(test.js, 64, 1))
 
     status: "done",
 >status : Symbol(status, Decl(test.js, 66, 15))
@@= skipped -28, +26 lines =@@
 // module.exports assignment
 /** @type {{ status: 'done', m(n: number): void }} */
 module.exports = {
->module.exports : Symbol(module.exports, Decl(mod.js, 0, 0))
->module : Symbol(export=, Decl(mod.js, 0, 0))
+>module.exports : Symbol(export=, Decl(mod.js, 0, 0))
+>module : Symbol(module.exports)
 >exports : Symbol(export=, Decl(mod.js, 0, 0))
 
     status: "done",
