//// [tests/cases/compiler/subtypeReductionWithAnyFunctionType.ts] ////

=== subtypeReductionWithAnyFunctionType.ts ===
// https://github.com/microsoft/typescript-go/issues/849

declare function useMemo<T>(func: () => T): T;
>useMemo : <T>(func: () => T) => T
>func : () => T

function getPredicate(alwaysTrue: boolean) {
>getPredicate : (alwaysTrue: boolean) => (input: string) => boolean
>alwaysTrue : boolean

    const predicate: (input: string) => boolean = useMemo(() => {
>predicate : (input: string) => boolean
>input : string
>useMemo(() => {        if (alwaysTrue) {            return () => true;        }        return x => x.length > 0;    }) : (x: string) => boolean
>useMemo : <T>(func: () => T) => T
>() => {        if (alwaysTrue) {            return () => true;        }        return x => x.length > 0;    } : () => (x: string) => boolean

        if (alwaysTrue) {
>alwaysTrue : boolean

            return () => true;
>() => true : () => true
>true : true
        }
        return x => x.length > 0;
>x => x.length > 0 : (x: string) => boolean
>x : string
>x.length > 0 : boolean
>x.length : number
>x : string
>length : number
>0 : 0

    });
    return predicate;
>predicate : (input: string) => boolean
}

